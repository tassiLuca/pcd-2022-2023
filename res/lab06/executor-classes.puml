@startuml executor-classes

interface ExecutorService extends Executor

abstract class AbstractExecutorService implements ExecutorService {
    #newTaskFor(runnable: Runnable, value: T): RunnableFuture<T>
    #newTaskFor(callable: Callable<T>): RunnableFuture<T>
}

class ForkJoinPool extends AbstractExecutorService
class ThreadPoolExecutor extends AbstractExecutorService

abstract class ForkJoinTask<V> implements Future {
    +complete(value: V)
    +completeExceptionally(e: Throwable)
    +**fork(): ForkJoinTask<V>**
    +**invoke(): V**
    +**join(): V**
    +{static} getQueuedTaskCount(): int
    +{static} getPool(): ForkJoinPool
    +isCancelled(): boolean
    +isCompletedAbnormally(): boolean
    +isCompletedNormally(): boolean
    +...()
}
note right of ForkJoinTask::fork
    Arranges to 
    asynchronously 
    execute this task 
    in the pool the 
    current task is 
    running in or in
    the ""commonPool""
end note
note right of ForkJoinTask::invoke
    Commences performing 
    this task, awaits its 
    completion if necessary, 
    and returns its result,
    or throws an exception.
end note
ForkJoinPool *-- ForkJoinTask

abstract class RecursiveTask<V> extends ForkJoinTask {
    #{abstract}compute(): V
}
note left of RecursiveTask::compute
    The main computation 
    performed by this task.
end note
note bottom of RecursiveTask
    Represent executions that 
    yield a return value.
end note

abstract class RecursiveAction extends ForkJoinTask {
    #{abstract}compute()
}
note bottom of RecursiveAction
    Represent executions that 
    **do not** yield a return value.
end note

abstract class CountedCompleter<T> extends ForkJoinTask {
    #{abstract}compute(): V
    +...()
}
note bottom of CountedCompleter
    A ""ForkJoinTask"" with a 
    completion action performed
    when triggered and there are 
    no remaining pending actions.
end note

interface ScheduledExecutorService extends ExecutorService {}

class ScheduledThreadPoolExecutor implements ScheduledExecutorService

@enduml